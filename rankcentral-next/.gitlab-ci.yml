stages:
  - test
  - build
  - deploy

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

# Test stage: Run linting and tests
test:
  stage: test
  image: node:20-alpine
  script:
    - npm ci
    - npm run lint
    # Add test commands when you have tests
    # - npm test
  only:
    - main
    - merge_requests

# Build stage: Build the Next.js application and Docker image
build:
  stage: build
  image: docker:24.0.0
  services:
    - docker:24.0.0-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -t $DOCKER_IMAGE_NAME:latest .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
  only:
    - main
    - tags
  needs:
    - test

# Deploy to staging
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying to staging environment..."
    - scp docker-compose.yml .env.docker $STAGING_SERVER_USER@$STAGING_SERVER_HOST:/path/to/deployment
    - ssh $STAGING_SERVER_USER@$STAGING_SERVER_HOST "cd /path/to/deployment &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose pull &&
      docker-compose down --remove-orphans &&
      docker-compose up -d"
  environment:
    name: staging
    url: https://staging.rankcentral.com
  only:
    - main
  when: manual
  needs:
    - build

# Deploy to production
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying to production environment..."
    - scp docker-compose.prod.yml .env.production $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_HOST:/path/to/production
    - ssh $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_HOST "cd /path/to/production &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker-compose -f docker-compose.prod.yml pull &&
      docker-compose -f docker-compose.prod.yml down --remove-orphans &&
      docker-compose -f docker-compose.prod.yml up -d"
  environment:
    name: production
    url: https://rankcentral.com
  only:
    - tags
  when: manual
  needs:
    - build
